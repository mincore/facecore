// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faapi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "faapi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace faapi {
class ImgBufDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ImgBuf> {
} _ImgBuf_default_instance_;
class DetectReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DetectReq> {
} _DetectReq_default_instance_;
class RectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Rect> {
} _Rect_default_instance_;
class DetectRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DetectResp> {
} _DetectResp_default_instance_;
class CheckinReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckinReq> {
} _CheckinReq_default_instance_;
class CheckinRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckinResp> {
} _CheckinResp_default_instance_;
class SearchReqDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchReq> {
} _SearchReq_default_instance_;
class SearchResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchResult> {
} _SearchResult_default_instance_;
class SearchRespDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SearchResp> {
} _SearchResp_default_instance_;

namespace protobuf_faapi_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBuf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBuf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImgBuf, data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectReq, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectReq, imgbuf_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, bottom_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResp, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectResp, facerects_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckinReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckinReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckinReq, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckinReq, imgbuf_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckinResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckinResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckinResp, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckinResp, faceid_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReq, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReq, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReq, imgbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchReq, tagnames_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, faceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResult, tagname_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResp, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchResp, results_),
  0,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(ImgBuf)},
  { 7, 14, sizeof(DetectReq)},
  { 16, 25, sizeof(Rect)},
  { 29, 36, sizeof(DetectResp)},
  { 38, 45, sizeof(CheckinReq)},
  { 47, 54, sizeof(CheckinResp)},
  { 56, 64, sizeof(SearchReq)},
  { 67, 75, sizeof(SearchResult)},
  { 78, 85, sizeof(SearchResp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImgBuf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DetectReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Rect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DetectResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckinReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckinResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SearchResp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "faapi.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _ImgBuf_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DetectReq_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Rect_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DetectResp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CheckinReq_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CheckinResp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SearchReq_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SearchResult_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SearchResp_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ImgBuf_default_instance_.DefaultConstruct();
  _DetectReq_default_instance_.DefaultConstruct();
  _Rect_default_instance_.DefaultConstruct();
  _DetectResp_default_instance_.DefaultConstruct();
  _CheckinReq_default_instance_.DefaultConstruct();
  _CheckinResp_default_instance_.DefaultConstruct();
  _SearchReq_default_instance_.DefaultConstruct();
  _SearchResult_default_instance_.DefaultConstruct();
  _SearchResp_default_instance_.DefaultConstruct();
  _DetectReq_default_instance_.get_mutable()->imgbuf_ = const_cast< ::faapi::ImgBuf*>(
      ::faapi::ImgBuf::internal_default_instance());
  _CheckinReq_default_instance_.get_mutable()->imgbuf_ = const_cast< ::faapi::ImgBuf*>(
      ::faapi::ImgBuf::internal_default_instance());
  _SearchReq_default_instance_.get_mutable()->imgbuf_ = const_cast< ::faapi::ImgBuf*>(
      ::faapi::ImgBuf::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013faapi.proto\022\005faapi\"\026\n\006ImgBuf\022\014\n\004data\030\001"
      " \001(\014\"6\n\tDetectReq\022\n\n\002id\030\001 \001(\r\022\035\n\006imgBuf\030"
      "\002 \001(\0132\r.faapi.ImgBuf\"@\n\004Rect\022\014\n\004left\030\001 \001"
      "(\r\022\013\n\003top\030\002 \001(\r\022\r\n\005right\030\003 \001(\r\022\016\n\006bottom"
      "\030\004 \001(\r\"8\n\nDetectResp\022\n\n\002id\030\001 \001(\r\022\036\n\tface"
      "Rects\030\002 \003(\0132\013.faapi.Rect\"7\n\nCheckinReq\022\n"
      "\n\002id\030\001 \001(\r\022\035\n\006imgBuf\030\002 \001(\0132\r.faapi.ImgBu"
      "f\")\n\013CheckinResp\022\n\n\002id\030\001 \001(\r\022\016\n\006faceID\030\002"
      " \003(\r\"H\n\tSearchReq\022\n\n\002id\030\001 \001(\r\022\035\n\006imgBuf\030"
      "\002 \001(\0132\r.faapi.ImgBuf\022\020\n\010tagNames\030\003 \003(\t\">"
      "\n\014SearchResult\022\016\n\006faceID\030\001 \001(\r\022\r\n\005score\030"
      "\002 \001(\001\022\017\n\007tagName\030\003 \001(\t\">\n\nSearchResp\022\n\n\002"
      "id\030\001 \001(\r\022$\n\007results\030\002 \003(\0132\023.faapi.Search"
      "Result"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 526);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "faapi.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_faapi_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImgBuf::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImgBuf::ImgBuf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_faapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.ImgBuf)
}
ImgBuf::ImgBuf(const ImgBuf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:faapi.ImgBuf)
}

void ImgBuf::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ImgBuf::~ImgBuf() {
  // @@protoc_insertion_point(destructor:faapi.ImgBuf)
  SharedDtor();
}

void ImgBuf::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImgBuf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImgBuf::descriptor() {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImgBuf& ImgBuf::default_instance() {
  protobuf_faapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImgBuf* ImgBuf::New(::google::protobuf::Arena* arena) const {
  ImgBuf* n = new ImgBuf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImgBuf::Clear() {
// @@protoc_insertion_point(message_clear_start:faapi.ImgBuf)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImgBuf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.ImgBuf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.ImgBuf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.ImgBuf)
  return false;
#undef DO_
}

void ImgBuf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.ImgBuf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.ImgBuf)
}

::google::protobuf::uint8* ImgBuf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.ImgBuf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.ImgBuf)
  return target;
}

size_t ImgBuf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faapi.ImgBuf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImgBuf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faapi.ImgBuf)
  GOOGLE_DCHECK_NE(&from, this);
  const ImgBuf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImgBuf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faapi.ImgBuf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faapi.ImgBuf)
    MergeFrom(*source);
  }
}

void ImgBuf::MergeFrom(const ImgBuf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faapi.ImgBuf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ImgBuf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faapi.ImgBuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImgBuf::CopyFrom(const ImgBuf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faapi.ImgBuf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImgBuf::IsInitialized() const {
  return true;
}

void ImgBuf::Swap(ImgBuf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImgBuf::InternalSwap(ImgBuf* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImgBuf::GetMetadata() const {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImgBuf

// optional bytes data = 1;
bool ImgBuf::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImgBuf::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void ImgBuf::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImgBuf::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& ImgBuf::data() const {
  // @@protoc_insertion_point(field_get:faapi.ImgBuf.data)
  return data_.GetNoArena();
}
void ImgBuf::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faapi.ImgBuf.data)
}
#if LANG_CXX11
void ImgBuf::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faapi.ImgBuf.data)
}
#endif
void ImgBuf::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faapi.ImgBuf.data)
}
void ImgBuf::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faapi.ImgBuf.data)
}
::std::string* ImgBuf::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:faapi.ImgBuf.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImgBuf::release_data() {
  // @@protoc_insertion_point(field_release:faapi.ImgBuf.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImgBuf::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:faapi.ImgBuf.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectReq::kIdFieldNumber;
const int DetectReq::kImgBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectReq::DetectReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_faapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.DetectReq)
}
DetectReq::DetectReq(const DetectReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_imgbuf()) {
    imgbuf_ = new ::faapi::ImgBuf(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:faapi.DetectReq)
}

void DetectReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&imgbuf_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&imgbuf_) + sizeof(id_));
}

DetectReq::~DetectReq() {
  // @@protoc_insertion_point(destructor:faapi.DetectReq)
  SharedDtor();
}

void DetectReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
}

void DetectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectReq::descriptor() {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectReq& DetectReq::default_instance() {
  protobuf_faapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

DetectReq* DetectReq::New(::google::protobuf::Arena* arena) const {
  DetectReq* n = new DetectReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:faapi.DetectReq)
  if (has_imgbuf()) {
    GOOGLE_DCHECK(imgbuf_ != NULL);
    imgbuf_->::faapi::ImgBuf::Clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DetectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.DetectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .faapi.ImgBuf imgBuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.DetectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.DetectReq)
  return false;
#undef DO_
}

void DetectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.DetectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .faapi.ImgBuf imgBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->imgbuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.DetectReq)
}

::google::protobuf::uint8* DetectReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.DetectReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .faapi.ImgBuf imgBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->imgbuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.DetectReq)
  return target;
}

size_t DetectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faapi.DetectReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .faapi.ImgBuf imgBuf = 2;
    if (has_imgbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imgbuf_);
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faapi.DetectReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faapi.DetectReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faapi.DetectReq)
    MergeFrom(*source);
  }
}

void DetectReq::MergeFrom(const DetectReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faapi.DetectReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_imgbuf()->::faapi::ImgBuf::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetectReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faapi.DetectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectReq::CopyFrom(const DetectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faapi.DetectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectReq::IsInitialized() const {
  return true;
}

void DetectReq::Swap(DetectReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectReq::InternalSwap(DetectReq* other) {
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectReq::GetMetadata() const {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectReq

// optional uint32 id = 1;
bool DetectReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DetectReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DetectReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DetectReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 DetectReq::id() const {
  // @@protoc_insertion_point(field_get:faapi.DetectReq.id)
  return id_;
}
void DetectReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:faapi.DetectReq.id)
}

// optional .faapi.ImgBuf imgBuf = 2;
bool DetectReq::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectReq::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectReq::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectReq::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::faapi::ImgBuf::Clear();
  clear_has_imgbuf();
}
const ::faapi::ImgBuf& DetectReq::imgbuf() const {
  // @@protoc_insertion_point(field_get:faapi.DetectReq.imgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::faapi::ImgBuf::internal_default_instance();
}
::faapi::ImgBuf* DetectReq::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::faapi::ImgBuf;
  }
  // @@protoc_insertion_point(field_mutable:faapi.DetectReq.imgBuf)
  return imgbuf_;
}
::faapi::ImgBuf* DetectReq::release_imgbuf() {
  // @@protoc_insertion_point(field_release:faapi.DetectReq.imgBuf)
  clear_has_imgbuf();
  ::faapi::ImgBuf* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void DetectReq::set_allocated_imgbuf(::faapi::ImgBuf* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:faapi.DetectReq.imgBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kLeftFieldNumber;
const int Rect::kTopFieldNumber;
const int Rect::kRightFieldNumber;
const int Rect::kBottomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_faapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.Rect)
}
Rect::Rect(const Rect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:faapi.Rect)
}

void Rect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&left_, 0, reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_) + sizeof(bottom_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:faapi.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rect& Rect::default_instance() {
  protobuf_faapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rect* Rect::New(::google::protobuf::Arena* arena) const {
  Rect* n = new Rect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:faapi.Rect)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&left_, 0, reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_) + sizeof(bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 top = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bottom = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bottom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->left(), output);
  }

  // optional uint32 top = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top(), output);
  }

  // optional uint32 right = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->right(), output);
  }

  // optional uint32 bottom = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bottom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.Rect)
}

::google::protobuf::uint8* Rect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->left(), target);
  }

  // optional uint32 top = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top(), target);
  }

  // optional uint32 right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->right(), target);
  }

  // optional uint32 bottom = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bottom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.Rect)
  return target;
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faapi.Rect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left());
    }

    // optional uint32 top = 2;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top());
    }

    // optional uint32 right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right());
    }

    // optional uint32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bottom());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faapi.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faapi.Rect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faapi.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faapi.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000004u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000008u) {
      bottom_ = from.bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faapi.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faapi.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::Swap(Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect::InternalSwap(Rect* other) {
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(right_, other->right_);
  std::swap(bottom_, other->bottom_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rect

// optional uint32 left = 1;
bool Rect::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Rect::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
void Rect::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void Rect::clear_left() {
  left_ = 0u;
  clear_has_left();
}
::google::protobuf::uint32 Rect::left() const {
  // @@protoc_insertion_point(field_get:faapi.Rect.left)
  return left_;
}
void Rect::set_left(::google::protobuf::uint32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:faapi.Rect.left)
}

// optional uint32 top = 2;
bool Rect::has_top() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Rect::set_has_top() {
  _has_bits_[0] |= 0x00000002u;
}
void Rect::clear_has_top() {
  _has_bits_[0] &= ~0x00000002u;
}
void Rect::clear_top() {
  top_ = 0u;
  clear_has_top();
}
::google::protobuf::uint32 Rect::top() const {
  // @@protoc_insertion_point(field_get:faapi.Rect.top)
  return top_;
}
void Rect::set_top(::google::protobuf::uint32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:faapi.Rect.top)
}

// optional uint32 right = 3;
bool Rect::has_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Rect::set_has_right() {
  _has_bits_[0] |= 0x00000004u;
}
void Rect::clear_has_right() {
  _has_bits_[0] &= ~0x00000004u;
}
void Rect::clear_right() {
  right_ = 0u;
  clear_has_right();
}
::google::protobuf::uint32 Rect::right() const {
  // @@protoc_insertion_point(field_get:faapi.Rect.right)
  return right_;
}
void Rect::set_right(::google::protobuf::uint32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:faapi.Rect.right)
}

// optional uint32 bottom = 4;
bool Rect::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Rect::set_has_bottom() {
  _has_bits_[0] |= 0x00000008u;
}
void Rect::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000008u;
}
void Rect::clear_bottom() {
  bottom_ = 0u;
  clear_has_bottom();
}
::google::protobuf::uint32 Rect::bottom() const {
  // @@protoc_insertion_point(field_get:faapi.Rect.bottom)
  return bottom_;
}
void Rect::set_bottom(::google::protobuf::uint32 value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:faapi.Rect.bottom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectResp::kIdFieldNumber;
const int DetectResp::kFaceRectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectResp::DetectResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_faapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.DetectResp)
}
DetectResp::DetectResp(const DetectResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      facerects_(from.facerects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:faapi.DetectResp)
}

void DetectResp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
}

DetectResp::~DetectResp() {
  // @@protoc_insertion_point(destructor:faapi.DetectResp)
  SharedDtor();
}

void DetectResp::SharedDtor() {
}

void DetectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectResp::descriptor() {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectResp& DetectResp::default_instance() {
  protobuf_faapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

DetectResp* DetectResp::New(::google::protobuf::Arena* arena) const {
  DetectResp* n = new DetectResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectResp::Clear() {
// @@protoc_insertion_point(message_clear_start:faapi.DetectResp)
  facerects_.Clear();
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DetectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.DetectResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .faapi.Rect faceRects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facerects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.DetectResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.DetectResp)
  return false;
#undef DO_
}

void DetectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.DetectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .faapi.Rect faceRects = 2;
  for (unsigned int i = 0, n = this->facerects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->facerects(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.DetectResp)
}

::google::protobuf::uint8* DetectResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.DetectResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .faapi.Rect faceRects = 2;
  for (unsigned int i = 0, n = this->facerects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->facerects(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.DetectResp)
  return target;
}

size_t DetectResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faapi.DetectResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .faapi.Rect faceRects = 2;
  {
    unsigned int count = this->facerects_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facerects(i));
    }
  }

  // optional uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faapi.DetectResp)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faapi.DetectResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faapi.DetectResp)
    MergeFrom(*source);
  }
}

void DetectResp::MergeFrom(const DetectResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faapi.DetectResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  facerects_.MergeFrom(from.facerects_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void DetectResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faapi.DetectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectResp::CopyFrom(const DetectResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faapi.DetectResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectResp::IsInitialized() const {
  return true;
}

void DetectResp::Swap(DetectResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectResp::InternalSwap(DetectResp* other) {
  facerects_.InternalSwap(&other->facerects_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectResp::GetMetadata() const {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectResp

// optional uint32 id = 1;
bool DetectResp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DetectResp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DetectResp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DetectResp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 DetectResp::id() const {
  // @@protoc_insertion_point(field_get:faapi.DetectResp.id)
  return id_;
}
void DetectResp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:faapi.DetectResp.id)
}

// repeated .faapi.Rect faceRects = 2;
int DetectResp::facerects_size() const {
  return facerects_.size();
}
void DetectResp::clear_facerects() {
  facerects_.Clear();
}
const ::faapi::Rect& DetectResp::facerects(int index) const {
  // @@protoc_insertion_point(field_get:faapi.DetectResp.faceRects)
  return facerects_.Get(index);
}
::faapi::Rect* DetectResp::mutable_facerects(int index) {
  // @@protoc_insertion_point(field_mutable:faapi.DetectResp.faceRects)
  return facerects_.Mutable(index);
}
::faapi::Rect* DetectResp::add_facerects() {
  // @@protoc_insertion_point(field_add:faapi.DetectResp.faceRects)
  return facerects_.Add();
}
::google::protobuf::RepeatedPtrField< ::faapi::Rect >*
DetectResp::mutable_facerects() {
  // @@protoc_insertion_point(field_mutable_list:faapi.DetectResp.faceRects)
  return &facerects_;
}
const ::google::protobuf::RepeatedPtrField< ::faapi::Rect >&
DetectResp::facerects() const {
  // @@protoc_insertion_point(field_list:faapi.DetectResp.faceRects)
  return facerects_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckinReq::kIdFieldNumber;
const int CheckinReq::kImgBufFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckinReq::CheckinReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_faapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.CheckinReq)
}
CheckinReq::CheckinReq(const CheckinReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_imgbuf()) {
    imgbuf_ = new ::faapi::ImgBuf(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:faapi.CheckinReq)
}

void CheckinReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&imgbuf_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&imgbuf_) + sizeof(id_));
}

CheckinReq::~CheckinReq() {
  // @@protoc_insertion_point(destructor:faapi.CheckinReq)
  SharedDtor();
}

void CheckinReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
}

void CheckinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckinReq::descriptor() {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckinReq& CheckinReq::default_instance() {
  protobuf_faapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckinReq* CheckinReq::New(::google::protobuf::Arena* arena) const {
  CheckinReq* n = new CheckinReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckinReq::Clear() {
// @@protoc_insertion_point(message_clear_start:faapi.CheckinReq)
  if (has_imgbuf()) {
    GOOGLE_DCHECK(imgbuf_ != NULL);
    imgbuf_->::faapi::ImgBuf::Clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.CheckinReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .faapi.ImgBuf imgBuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.CheckinReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.CheckinReq)
  return false;
#undef DO_
}

void CheckinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.CheckinReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .faapi.ImgBuf imgBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->imgbuf_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.CheckinReq)
}

::google::protobuf::uint8* CheckinReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.CheckinReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .faapi.ImgBuf imgBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->imgbuf_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.CheckinReq)
  return target;
}

size_t CheckinReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faapi.CheckinReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .faapi.ImgBuf imgBuf = 2;
    if (has_imgbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imgbuf_);
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckinReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faapi.CheckinReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckinReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckinReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faapi.CheckinReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faapi.CheckinReq)
    MergeFrom(*source);
  }
}

void CheckinReq::MergeFrom(const CheckinReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faapi.CheckinReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_imgbuf()->::faapi::ImgBuf::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckinReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faapi.CheckinReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckinReq::CopyFrom(const CheckinReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faapi.CheckinReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckinReq::IsInitialized() const {
  return true;
}

void CheckinReq::Swap(CheckinReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckinReq::InternalSwap(CheckinReq* other) {
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckinReq::GetMetadata() const {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckinReq

// optional uint32 id = 1;
bool CheckinReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckinReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckinReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckinReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 CheckinReq::id() const {
  // @@protoc_insertion_point(field_get:faapi.CheckinReq.id)
  return id_;
}
void CheckinReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:faapi.CheckinReq.id)
}

// optional .faapi.ImgBuf imgBuf = 2;
bool CheckinReq::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckinReq::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckinReq::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckinReq::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::faapi::ImgBuf::Clear();
  clear_has_imgbuf();
}
const ::faapi::ImgBuf& CheckinReq::imgbuf() const {
  // @@protoc_insertion_point(field_get:faapi.CheckinReq.imgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::faapi::ImgBuf::internal_default_instance();
}
::faapi::ImgBuf* CheckinReq::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::faapi::ImgBuf;
  }
  // @@protoc_insertion_point(field_mutable:faapi.CheckinReq.imgBuf)
  return imgbuf_;
}
::faapi::ImgBuf* CheckinReq::release_imgbuf() {
  // @@protoc_insertion_point(field_release:faapi.CheckinReq.imgBuf)
  clear_has_imgbuf();
  ::faapi::ImgBuf* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void CheckinReq::set_allocated_imgbuf(::faapi::ImgBuf* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:faapi.CheckinReq.imgBuf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckinResp::kIdFieldNumber;
const int CheckinResp::kFaceIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckinResp::CheckinResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_faapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.CheckinResp)
}
CheckinResp::CheckinResp(const CheckinResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      faceid_(from.faceid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:faapi.CheckinResp)
}

void CheckinResp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
}

CheckinResp::~CheckinResp() {
  // @@protoc_insertion_point(destructor:faapi.CheckinResp)
  SharedDtor();
}

void CheckinResp::SharedDtor() {
}

void CheckinResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckinResp::descriptor() {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckinResp& CheckinResp::default_instance() {
  protobuf_faapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckinResp* CheckinResp::New(::google::protobuf::Arena* arena) const {
  CheckinResp* n = new CheckinResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckinResp::Clear() {
// @@protoc_insertion_point(message_clear_start:faapi.CheckinResp)
  faceid_.Clear();
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckinResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.CheckinResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 faceID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_faceid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_faceid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.CheckinResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.CheckinResp)
  return false;
#undef DO_
}

void CheckinResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.CheckinResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 faceID = 2;
  for (int i = 0, n = this->faceid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->faceid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.CheckinResp)
}

::google::protobuf::uint8* CheckinResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.CheckinResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 faceID = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->faceid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.CheckinResp)
  return target;
}

size_t CheckinResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faapi.CheckinResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 faceID = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->faceid_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->faceid_size());
    total_size += data_size;
  }

  // optional uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckinResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faapi.CheckinResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckinResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckinResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faapi.CheckinResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faapi.CheckinResp)
    MergeFrom(*source);
  }
}

void CheckinResp::MergeFrom(const CheckinResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faapi.CheckinResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  faceid_.MergeFrom(from.faceid_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void CheckinResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faapi.CheckinResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckinResp::CopyFrom(const CheckinResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faapi.CheckinResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckinResp::IsInitialized() const {
  return true;
}

void CheckinResp::Swap(CheckinResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckinResp::InternalSwap(CheckinResp* other) {
  faceid_.InternalSwap(&other->faceid_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckinResp::GetMetadata() const {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckinResp

// optional uint32 id = 1;
bool CheckinResp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckinResp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckinResp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckinResp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 CheckinResp::id() const {
  // @@protoc_insertion_point(field_get:faapi.CheckinResp.id)
  return id_;
}
void CheckinResp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:faapi.CheckinResp.id)
}

// repeated uint32 faceID = 2;
int CheckinResp::faceid_size() const {
  return faceid_.size();
}
void CheckinResp::clear_faceid() {
  faceid_.Clear();
}
::google::protobuf::uint32 CheckinResp::faceid(int index) const {
  // @@protoc_insertion_point(field_get:faapi.CheckinResp.faceID)
  return faceid_.Get(index);
}
void CheckinResp::set_faceid(int index, ::google::protobuf::uint32 value) {
  faceid_.Set(index, value);
  // @@protoc_insertion_point(field_set:faapi.CheckinResp.faceID)
}
void CheckinResp::add_faceid(::google::protobuf::uint32 value) {
  faceid_.Add(value);
  // @@protoc_insertion_point(field_add:faapi.CheckinResp.faceID)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CheckinResp::faceid() const {
  // @@protoc_insertion_point(field_list:faapi.CheckinResp.faceID)
  return faceid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CheckinResp::mutable_faceid() {
  // @@protoc_insertion_point(field_mutable_list:faapi.CheckinResp.faceID)
  return &faceid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchReq::kIdFieldNumber;
const int SearchReq::kImgBufFieldNumber;
const int SearchReq::kTagNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchReq::SearchReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_faapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.SearchReq)
}
SearchReq::SearchReq(const SearchReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tagnames_(from.tagnames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_imgbuf()) {
    imgbuf_ = new ::faapi::ImgBuf(*from.imgbuf_);
  } else {
    imgbuf_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:faapi.SearchReq)
}

void SearchReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&imgbuf_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&imgbuf_) + sizeof(id_));
}

SearchReq::~SearchReq() {
  // @@protoc_insertion_point(destructor:faapi.SearchReq)
  SharedDtor();
}

void SearchReq::SharedDtor() {
  if (this != internal_default_instance()) {
    delete imgbuf_;
  }
}

void SearchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchReq::descriptor() {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchReq& SearchReq::default_instance() {
  protobuf_faapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchReq* SearchReq::New(::google::protobuf::Arena* arena) const {
  SearchReq* n = new SearchReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:faapi.SearchReq)
  tagnames_.Clear();
  if (has_imgbuf()) {
    GOOGLE_DCHECK(imgbuf_ != NULL);
    imgbuf_->::faapi::ImgBuf::Clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.SearchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .faapi.ImgBuf imgBuf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imgbuf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tagNames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tagnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagnames(this->tagnames_size() - 1).data(),
            this->tagnames(this->tagnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "faapi.SearchReq.tagNames");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.SearchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.SearchReq)
  return false;
#undef DO_
}

void SearchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.SearchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .faapi.ImgBuf imgBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->imgbuf_, output);
  }

  // repeated string tagNames = 3;
  for (int i = 0, n = this->tagnames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagnames(i).data(), this->tagnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "faapi.SearchReq.tagNames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tagnames(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.SearchReq)
}

::google::protobuf::uint8* SearchReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.SearchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .faapi.ImgBuf imgBuf = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->imgbuf_, deterministic, target);
  }

  // repeated string tagNames = 3;
  for (int i = 0, n = this->tagnames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagnames(i).data(), this->tagnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "faapi.SearchReq.tagNames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tagnames(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.SearchReq)
  return target;
}

size_t SearchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faapi.SearchReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string tagNames = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tagnames_size());
  for (int i = 0, n = this->tagnames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tagnames(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .faapi.ImgBuf imgBuf = 2;
    if (has_imgbuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imgbuf_);
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faapi.SearchReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faapi.SearchReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faapi.SearchReq)
    MergeFrom(*source);
  }
}

void SearchReq::MergeFrom(const SearchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faapi.SearchReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tagnames_.MergeFrom(from.tagnames_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_imgbuf()->::faapi::ImgBuf::MergeFrom(from.imgbuf());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faapi.SearchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchReq::CopyFrom(const SearchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faapi.SearchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReq::IsInitialized() const {
  return true;
}

void SearchReq::Swap(SearchReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchReq::InternalSwap(SearchReq* other) {
  tagnames_.InternalSwap(&other->tagnames_);
  std::swap(imgbuf_, other->imgbuf_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchReq::GetMetadata() const {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchReq

// optional uint32 id = 1;
bool SearchReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 SearchReq::id() const {
  // @@protoc_insertion_point(field_get:faapi.SearchReq.id)
  return id_;
}
void SearchReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:faapi.SearchReq.id)
}

// optional .faapi.ImgBuf imgBuf = 2;
bool SearchReq::has_imgbuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchReq::set_has_imgbuf() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchReq::clear_has_imgbuf() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchReq::clear_imgbuf() {
  if (imgbuf_ != NULL) imgbuf_->::faapi::ImgBuf::Clear();
  clear_has_imgbuf();
}
const ::faapi::ImgBuf& SearchReq::imgbuf() const {
  // @@protoc_insertion_point(field_get:faapi.SearchReq.imgBuf)
  return imgbuf_ != NULL ? *imgbuf_
                         : *::faapi::ImgBuf::internal_default_instance();
}
::faapi::ImgBuf* SearchReq::mutable_imgbuf() {
  set_has_imgbuf();
  if (imgbuf_ == NULL) {
    imgbuf_ = new ::faapi::ImgBuf;
  }
  // @@protoc_insertion_point(field_mutable:faapi.SearchReq.imgBuf)
  return imgbuf_;
}
::faapi::ImgBuf* SearchReq::release_imgbuf() {
  // @@protoc_insertion_point(field_release:faapi.SearchReq.imgBuf)
  clear_has_imgbuf();
  ::faapi::ImgBuf* temp = imgbuf_;
  imgbuf_ = NULL;
  return temp;
}
void SearchReq::set_allocated_imgbuf(::faapi::ImgBuf* imgbuf) {
  delete imgbuf_;
  imgbuf_ = imgbuf;
  if (imgbuf) {
    set_has_imgbuf();
  } else {
    clear_has_imgbuf();
  }
  // @@protoc_insertion_point(field_set_allocated:faapi.SearchReq.imgBuf)
}

// repeated string tagNames = 3;
int SearchReq::tagnames_size() const {
  return tagnames_.size();
}
void SearchReq::clear_tagnames() {
  tagnames_.Clear();
}
const ::std::string& SearchReq::tagnames(int index) const {
  // @@protoc_insertion_point(field_get:faapi.SearchReq.tagNames)
  return tagnames_.Get(index);
}
::std::string* SearchReq::mutable_tagnames(int index) {
  // @@protoc_insertion_point(field_mutable:faapi.SearchReq.tagNames)
  return tagnames_.Mutable(index);
}
void SearchReq::set_tagnames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:faapi.SearchReq.tagNames)
  tagnames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SearchReq::set_tagnames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:faapi.SearchReq.tagNames)
  tagnames_.Mutable(index)->assign(std::move(value));
}
#endif
void SearchReq::set_tagnames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tagnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:faapi.SearchReq.tagNames)
}
void SearchReq::set_tagnames(int index, const char* value, size_t size) {
  tagnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:faapi.SearchReq.tagNames)
}
::std::string* SearchReq::add_tagnames() {
  // @@protoc_insertion_point(field_add_mutable:faapi.SearchReq.tagNames)
  return tagnames_.Add();
}
void SearchReq::add_tagnames(const ::std::string& value) {
  tagnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:faapi.SearchReq.tagNames)
}
#if LANG_CXX11
void SearchReq::add_tagnames(::std::string&& value) {
  tagnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:faapi.SearchReq.tagNames)
}
#endif
void SearchReq::add_tagnames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tagnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:faapi.SearchReq.tagNames)
}
void SearchReq::add_tagnames(const char* value, size_t size) {
  tagnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:faapi.SearchReq.tagNames)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SearchReq::tagnames() const {
  // @@protoc_insertion_point(field_list:faapi.SearchReq.tagNames)
  return tagnames_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SearchReq::mutable_tagnames() {
  // @@protoc_insertion_point(field_mutable_list:faapi.SearchReq.tagNames)
  return &tagnames_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchResult::kFaceIDFieldNumber;
const int SearchResult::kScoreFieldNumber;
const int SearchResult::kTagNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchResult::SearchResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_faapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.SearchResult)
}
SearchResult::SearchResult(const SearchResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tagname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tagname()) {
    tagname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagname_);
  }
  ::memcpy(&score_, &from.score_,
    reinterpret_cast<char*>(&faceid_) -
    reinterpret_cast<char*>(&score_) + sizeof(faceid_));
  // @@protoc_insertion_point(copy_constructor:faapi.SearchResult)
}

void SearchResult::SharedCtor() {
  _cached_size_ = 0;
  tagname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, reinterpret_cast<char*>(&faceid_) -
    reinterpret_cast<char*>(&score_) + sizeof(faceid_));
}

SearchResult::~SearchResult() {
  // @@protoc_insertion_point(destructor:faapi.SearchResult)
  SharedDtor();
}

void SearchResult::SharedDtor() {
  tagname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResult::descriptor() {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchResult& SearchResult::default_instance() {
  protobuf_faapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchResult* SearchResult::New(::google::protobuf::Arena* arena) const {
  SearchResult* n = new SearchResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:faapi.SearchResult)
  if (has_tagname()) {
    GOOGLE_DCHECK(!tagname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tagname_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&faceid_) -
      reinterpret_cast<char*>(&score_) + sizeof(faceid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.SearchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faceID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_faceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tagName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagname().data(), this->tagname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "faapi.SearchResult.tagName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.SearchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.SearchResult)
  return false;
#undef DO_
}

void SearchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.SearchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 faceID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faceid(), output);
  }

  // optional double score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->score(), output);
  }

  // optional string tagName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "faapi.SearchResult.tagName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tagname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.SearchResult)
}

::google::protobuf::uint8* SearchResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.SearchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 faceID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faceid(), target);
  }

  // optional double score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->score(), target);
  }

  // optional string tagName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagname().data(), this->tagname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "faapi.SearchResult.tagName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tagname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.SearchResult)
  return target;
}

size_t SearchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faapi.SearchResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string tagName = 3;
    if (has_tagname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagname());
    }

    // optional double score = 2;
    if (has_score()) {
      total_size += 1 + 8;
    }

    // optional uint32 faceID = 1;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faceid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faapi.SearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faapi.SearchResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faapi.SearchResult)
    MergeFrom(*source);
  }
}

void SearchResult::MergeFrom(const SearchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faapi.SearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tagname();
      tagname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagname_);
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      faceid_ = from.faceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faapi.SearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResult::CopyFrom(const SearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faapi.SearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResult::IsInitialized() const {
  return true;
}

void SearchResult::Swap(SearchResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchResult::InternalSwap(SearchResult* other) {
  tagname_.Swap(&other->tagname_);
  std::swap(score_, other->score_);
  std::swap(faceid_, other->faceid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchResult::GetMetadata() const {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchResult

// optional uint32 faceID = 1;
bool SearchResult::has_faceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SearchResult::set_has_faceid() {
  _has_bits_[0] |= 0x00000004u;
}
void SearchResult::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000004u;
}
void SearchResult::clear_faceid() {
  faceid_ = 0u;
  clear_has_faceid();
}
::google::protobuf::uint32 SearchResult::faceid() const {
  // @@protoc_insertion_point(field_get:faapi.SearchResult.faceID)
  return faceid_;
}
void SearchResult::set_faceid(::google::protobuf::uint32 value) {
  set_has_faceid();
  faceid_ = value;
  // @@protoc_insertion_point(field_set:faapi.SearchResult.faceID)
}

// optional double score = 2;
bool SearchResult::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchResult::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchResult::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchResult::clear_score() {
  score_ = 0;
  clear_has_score();
}
double SearchResult::score() const {
  // @@protoc_insertion_point(field_get:faapi.SearchResult.score)
  return score_;
}
void SearchResult::set_score(double value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:faapi.SearchResult.score)
}

// optional string tagName = 3;
bool SearchResult::has_tagname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchResult::set_has_tagname() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchResult::clear_has_tagname() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchResult::clear_tagname() {
  tagname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tagname();
}
const ::std::string& SearchResult::tagname() const {
  // @@protoc_insertion_point(field_get:faapi.SearchResult.tagName)
  return tagname_.GetNoArena();
}
void SearchResult::set_tagname(const ::std::string& value) {
  set_has_tagname();
  tagname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:faapi.SearchResult.tagName)
}
#if LANG_CXX11
void SearchResult::set_tagname(::std::string&& value) {
  set_has_tagname();
  tagname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:faapi.SearchResult.tagName)
}
#endif
void SearchResult::set_tagname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tagname();
  tagname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:faapi.SearchResult.tagName)
}
void SearchResult::set_tagname(const char* value, size_t size) {
  set_has_tagname();
  tagname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:faapi.SearchResult.tagName)
}
::std::string* SearchResult::mutable_tagname() {
  set_has_tagname();
  // @@protoc_insertion_point(field_mutable:faapi.SearchResult.tagName)
  return tagname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SearchResult::release_tagname() {
  // @@protoc_insertion_point(field_release:faapi.SearchResult.tagName)
  clear_has_tagname();
  return tagname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SearchResult::set_allocated_tagname(::std::string* tagname) {
  if (tagname != NULL) {
    set_has_tagname();
  } else {
    clear_has_tagname();
  }
  tagname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagname);
  // @@protoc_insertion_point(field_set_allocated:faapi.SearchResult.tagName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchResp::kIdFieldNumber;
const int SearchResp::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchResp::SearchResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_faapi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:faapi.SearchResp)
}
SearchResp::SearchResp(const SearchResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:faapi.SearchResp)
}

void SearchResp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
}

SearchResp::~SearchResp() {
  // @@protoc_insertion_point(destructor:faapi.SearchResp)
  SharedDtor();
}

void SearchResp::SharedDtor() {
}

void SearchResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchResp::descriptor() {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchResp& SearchResp::default_instance() {
  protobuf_faapi_2eproto::InitDefaults();
  return *internal_default_instance();
}

SearchResp* SearchResp::New(::google::protobuf::Arena* arena) const {
  SearchResp* n = new SearchResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchResp::Clear() {
// @@protoc_insertion_point(message_clear_start:faapi.SearchResp)
  results_.Clear();
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SearchResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:faapi.SearchResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .faapi.SearchResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:faapi.SearchResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:faapi.SearchResp)
  return false;
#undef DO_
}

void SearchResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:faapi.SearchResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .faapi.SearchResult results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:faapi.SearchResp)
}

::google::protobuf::uint8* SearchResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:faapi.SearchResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .faapi.SearchResult results = 2;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->results(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faapi.SearchResp)
  return target;
}

size_t SearchResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faapi.SearchResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .faapi.SearchResult results = 2;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  // optional uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:faapi.SearchResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:faapi.SearchResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:faapi.SearchResp)
    MergeFrom(*source);
  }
}

void SearchResp::MergeFrom(const SearchResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faapi.SearchResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void SearchResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:faapi.SearchResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResp::CopyFrom(const SearchResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faapi.SearchResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResp::IsInitialized() const {
  return true;
}

void SearchResp::Swap(SearchResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchResp::InternalSwap(SearchResp* other) {
  results_.InternalSwap(&other->results_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchResp::GetMetadata() const {
  protobuf_faapi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_faapi_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchResp

// optional uint32 id = 1;
bool SearchResp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchResp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchResp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchResp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 SearchResp::id() const {
  // @@protoc_insertion_point(field_get:faapi.SearchResp.id)
  return id_;
}
void SearchResp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:faapi.SearchResp.id)
}

// repeated .faapi.SearchResult results = 2;
int SearchResp::results_size() const {
  return results_.size();
}
void SearchResp::clear_results() {
  results_.Clear();
}
const ::faapi::SearchResult& SearchResp::results(int index) const {
  // @@protoc_insertion_point(field_get:faapi.SearchResp.results)
  return results_.Get(index);
}
::faapi::SearchResult* SearchResp::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:faapi.SearchResp.results)
  return results_.Mutable(index);
}
::faapi::SearchResult* SearchResp::add_results() {
  // @@protoc_insertion_point(field_add:faapi.SearchResp.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::faapi::SearchResult >*
SearchResp::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:faapi.SearchResp.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::faapi::SearchResult >&
SearchResp::results() const {
  // @@protoc_insertion_point(field_list:faapi.SearchResp.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace faapi

// @@protoc_insertion_point(global_scope)
